//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Data.Abstract;

namespace Assmnts
{
  public partial class def_AttachType : IAttachType
  {
  	/// <summary>
  	/// The cache needs a constructor that doesn't initialize the navigation collections
  	/// </summary>
  	/// <param name="dummy">unused parameter to distinguish from default constructor</param>
  	protected def_AttachType(bool dummy) { }
  
  	public def_AttachType(IAttachType c) : this() {
  		if (c != null) {
  			AttachTypeId = c.AttachTypeId;
  			AttachDescription = c.AttachDescription;
  			CreatedDate = c.CreatedDate;
  			CreatedBy = c.CreatedBy;
  		}
  	}
  
  }
  
  public partial class def_BaseTypes : IBaseType
  {
  	/// <summary>
  	/// The cache needs a constructor that doesn't initialize the navigation collections
  	/// </summary>
  	/// <param name="dummy">unused parameter to distinguish from default constructor</param>
  	protected def_BaseTypes(bool dummy) { }
  
  	public def_BaseTypes(IBaseType c) : this() {
  		if (c != null) {
  			baseTypeId = c.baseTypeId;
  			enumeration = c.enumeration;
  		}
  	}
  
  }
  
  public partial class def_FormParts : IFormPart
  {
  	/// <summary>
  	/// We need a default constructor because EF didn't give it one
  	/// </summary>
  	public def_FormParts() { }
  
  	public def_FormParts(IFormPart c) {
  		if (c != null) {
  			formPartId = c.formPartId;
  			formId = c.formId;
  			partId = c.partId;
  			order = c.order;
  		}
  	}
  
  }
  
  public partial class def_Forms : IForm
  {
  	/// <summary>
  	/// The cache needs a constructor that doesn't initialize the navigation collections
  	/// </summary>
  	/// <param name="dummy">unused parameter to distinguish from default constructor</param>
  	protected def_Forms(bool dummy) { }
  
  	public def_Forms(IForm c) : this() {
  		if (c != null) {
  			formId = c.formId;
  			identifier = c.identifier;
  			title = c.title;
  			EnterpriseID = c.EnterpriseID;
  		}
  	}
  
  }
  
  public partial class def_FormText : IFormText
  {
  	/// <summary>
  	/// We need a default constructor because EF didn't give it one
  	/// </summary>
  	public def_FormText() { }
  
  	public def_FormText(IFormText c) {
  		if (c != null) {
  			frmTextId = c.frmTextId;
  			formId = c.formId;
  			EnterpriseID = c.EnterpriseID;
  			langId = c.langId;
  			frmTitle = c.frmTitle;
  		}
  	}
  
  }
  
  public partial class def_Items : IItem
  {
  	/// <summary>
  	/// The cache needs a constructor that doesn't initialize the navigation collections
  	/// </summary>
  	/// <param name="dummy">unused parameter to distinguish from default constructor</param>
  	protected def_Items(bool dummy) { }
  
  	public def_Items(IItem c) : this() {
  		if (c != null) {
  			itemId = c.itemId;
  			identifier = c.identifier;
  			title = c.title;
  			label = c.label;
  			prompt = c.prompt;
  			itemBody = c.itemBody;
  			langId = c.langId;
  		}
  	}
  
  }
  
  public partial class def_ItemsEnt : IItemsEnt
  {
  	/// <summary>
  	/// We need a default constructor because EF didn't give it one
  	/// </summary>
  	public def_ItemsEnt() { }
  
  	public def_ItemsEnt(IItemsEnt c) {
  		if (c != null) {
  			itemEntId = c.itemEntId;
  			ent_id = c.ent_id;
  			itemId = c.itemId;
  			identifier = c.identifier;
  			title = c.title;
  			label = c.label;
  			prompt = c.prompt;
  			itemBody = c.itemBody;
  			langId = c.langId;
  		}
  	}
  
  }
  
  public partial class def_ItemText : IItemText
  {
  	/// <summary>
  	/// We need a default constructor because EF didn't give it one
  	/// </summary>
  	public def_ItemText() { }
  
  	public def_ItemText(IItemText c) {
  		if (c != null) {
  			itemTextId = c.itemTextId;
  			itemId = c.itemId;
  			EnterpriseID = c.EnterpriseID;
  			langId = c.langId;
  			title = c.title;
  			label = c.label;
  			prompt = c.prompt;
  			itemBody = c.itemBody;
  		}
  	}
  
  }
  
  public partial class def_ItemVariables : IItemVariable
  {
  	/// <summary>
  	/// The cache needs a constructor that doesn't initialize the navigation collections
  	/// </summary>
  	/// <param name="dummy">unused parameter to distinguish from default constructor</param>
  	protected def_ItemVariables(bool dummy) { }
  
  	public def_ItemVariables(IItemVariable c) : this() {
  		if (c != null) {
  			itemVariableId = c.itemVariableId;
  			itemId = c.itemId;
  			identifier = c.identifier;
  			baseTypeId = c.baseTypeId;
  			defaultValue = c.defaultValue;
  			outcomeDeclarationId = c.outcomeDeclarationId;
  		}
  	}
  
  }
  
  public partial class def_Languages : ILanguage
  {
  	/// <summary>
  	/// The cache needs a constructor that doesn't initialize the navigation collections
  	/// </summary>
  	/// <param name="dummy">unused parameter to distinguish from default constructor</param>
  	protected def_Languages(bool dummy) { }
  
  	public def_Languages(ILanguage c) : this() {
  		if (c != null) {
  			langId = c.langId;
  			languageRegion = c.languageRegion;
  			title = c.title;
  		}
  	}
  
  }
  
  public partial class def_LookupDetail : ILookupDetail
  {
  	/// <summary>
  	/// The cache needs a constructor that doesn't initialize the navigation collections
  	/// </summary>
  	/// <param name="dummy">unused parameter to distinguish from default constructor</param>
  	protected def_LookupDetail(bool dummy) { }
  
  	public def_LookupDetail(ILookupDetail c) : this() {
  		if (c != null) {
  			lookupDetailId = c.lookupDetailId;
  			lookupMasterId = c.lookupMasterId;
  			EnterpriseID = c.EnterpriseID;
  			GroupID = c.GroupID;
  			displayOrder = c.displayOrder;
  			dataValue = c.dataValue;
  			StatusFlag = c.StatusFlag;
  		}
  	}
  
  }
  
  public partial class def_LookupMaster : ILookupMaster
  {
  	/// <summary>
  	/// The cache needs a constructor that doesn't initialize the navigation collections
  	/// </summary>
  	/// <param name="dummy">unused parameter to distinguish from default constructor</param>
  	protected def_LookupMaster(bool dummy) { }
  
  	public def_LookupMaster(ILookupMaster c) : this() {
  		if (c != null) {
  			lookupMasterId = c.lookupMasterId;
  			lookupCode = c.lookupCode;
  			title = c.title;
  			baseTypeId = c.baseTypeId;
  		}
  	}
  
  }
  
  public partial class def_LookupText : ILookupText
  {
  	/// <summary>
  	/// We need a default constructor because EF didn't give it one
  	/// </summary>
  	public def_LookupText() { }
  
  	public def_LookupText(ILookupText c) {
  		if (c != null) {
  			lookupTextId = c.lookupTextId;
  			lookupDetailId = c.lookupDetailId;
  			langId = c.langId;
  			displayText = c.displayText;
  		}
  	}
  
  }
  
  public partial class def_Parts : IPart
  {
  	/// <summary>
  	/// The cache needs a constructor that doesn't initialize the navigation collections
  	/// </summary>
  	/// <param name="dummy">unused parameter to distinguish from default constructor</param>
  	protected def_Parts(bool dummy) { }
  
  	public def_Parts(IPart c) : this() {
  		if (c != null) {
  			partId = c.partId;
  			identifier = c.identifier;
  			branchRuleId = c.branchRuleId;
  			title = c.title;
  		}
  	}
  
  }
  
  public partial class def_PartSections : IPartSection
  {
  	/// <summary>
  	/// The cache needs a constructor that doesn't initialize the navigation collections
  	/// </summary>
  	/// <param name="dummy">unused parameter to distinguish from default constructor</param>
  	protected def_PartSections(bool dummy) { }
  
  	public def_PartSections(IPartSection c) : this() {
  		if (c != null) {
  			partSectionId = c.partSectionId;
  			partId = c.partId;
  			sectionId = c.sectionId;
  			order = c.order;
  			visible = c.visible;
  		}
  	}
  
  }
  
  public partial class def_PartSectionsEnt : IPartSectionsEnt
  {
  	/// <summary>
  	/// We need a default constructor because EF didn't give it one
  	/// </summary>
  	public def_PartSectionsEnt() { }
  
  	public def_PartSectionsEnt(IPartSectionsEnt c) {
  		if (c != null) {
  			partSectionEntId = c.partSectionEntId;
  			partSectionId = c.partSectionId;
  			entPartSectionId = c.entPartSectionId;
  			EnterpriseID = c.EnterpriseID;
  			visible = c.visible;
  		}
  	}
  
  }
  
  public partial class def_PartText : IPartText
  {
  	/// <summary>
  	/// We need a default constructor because EF didn't give it one
  	/// </summary>
  	public def_PartText() { }
  
  	public def_PartText(IPartText c) {
  		if (c != null) {
  			prtTextId = c.prtTextId;
  			partId = c.partId;
  			EnterpriseID = c.EnterpriseID;
  			langId = c.langId;
  			prtTitle = c.prtTitle;
  		}
  	}
  
  }
  
  public partial class def_SectionItems : ISectionItem
  {
  	/// <summary>
  	/// The cache needs a constructor that doesn't initialize the navigation collections
  	/// </summary>
  	/// <param name="dummy">unused parameter to distinguish from default constructor</param>
  	protected def_SectionItems(bool dummy) { }
  
  	public def_SectionItems(ISectionItem c) : this() {
  		if (c != null) {
  			sectionItemId = c.sectionItemId;
  			sectionId = c.sectionId;
  			itemId = c.itemId;
  			subSectionId = c.subSectionId;
  			order = c.order;
  			validation = c.validation;
  			display = c.display;
  			readOnly = c.readOnly;
  			requiredSection = c.requiredSection;
  			requiredForm = c.requiredForm;
  		}
  	}
  
  }
  
  public partial class def_SectionItemsEnt : ISectionItemsEnt
  {
  	/// <summary>
  	/// We need a default constructor because EF didn't give it one
  	/// </summary>
  	public def_SectionItemsEnt() { }
  
  	public def_SectionItemsEnt(ISectionItemsEnt c) {
  		if (c != null) {
  			sectionItemEntId = c.sectionItemEntId;
  			sectionItemId = c.sectionItemId;
  			validation = c.validation;
  			display = c.display;
  			readOnly = c.readOnly;
  			requiredSection = c.requiredSection;
  			requiredForm = c.requiredForm;
  			EnterpriseID = c.EnterpriseID;
  		}
  	}
  
  }
  
  public partial class def_Sections : ISection
  {
  	/// <summary>
  	/// The cache needs a constructor that doesn't initialize the navigation collections
  	/// </summary>
  	/// <param name="dummy">unused parameter to distinguish from default constructor</param>
  	protected def_Sections(bool dummy) { }
  
  	public def_Sections(ISection c) : this() {
  		if (c != null) {
  			sectionId = c.sectionId;
  			identifier = c.identifier;
  			title = c.title;
  			visible = c.visible;
  			href = c.href;
  			branchRuleId = c.branchRuleId;
  			rubricBlock = c.rubricBlock;
  			multipleItemsPerPage = c.multipleItemsPerPage;
  		}
  	}
  
  }
  
  public partial class def_SectionText : ISectionText
  {
  	/// <summary>
  	/// We need a default constructor because EF didn't give it one
  	/// </summary>
  	public def_SectionText() { }
  
  	public def_SectionText(ISectionText c) {
  		if (c != null) {
  			sctnTextId = c.sctnTextId;
  			sectionId = c.sectionId;
  			EnterpriseID = c.EnterpriseID;
  			langId = c.langId;
  			sctnTitle = c.sctnTitle;
  		}
  	}
  
  }
  
  public partial class def_SubSections : ISubSection
  {
  	/// <summary>
  	/// The cache needs a constructor that doesn't initialize the navigation collections
  	/// </summary>
  	/// <param name="dummy">unused parameter to distinguish from default constructor</param>
  	protected def_SubSections(bool dummy) { }
  
  	public def_SubSections(ISubSection c) : this() {
  		if (c != null) {
  			subSectionId = c.subSectionId;
  			sectionId = c.sectionId;
  		}
  	}
  
  }
  
}
